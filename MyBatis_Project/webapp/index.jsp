<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<!-- 
		* 프레임워크
		- 개발자가 보다 편리한 환경에서 개발할 수 있도록 제공하는 뼈대, 틀이라고 생각
		- 소프트웨어 개발의 입장으로써는 공통으로 사용하는 라이브러리 / 개발도구 / 인터페이스 등등을 의미
		
		* 왜 프레임워크를 쓰는가? (프레임워크의 필요성)
		- 현재 웹프로그래밍의 규모가 커지고 있음
		=> 거대하고 복잡도가 높은 프로젝트를 완성시키기 위해 많은 사람들이 필요함
		=> 그 개발자들이 "통일성" 있게 "빠르고" "안정적"으로 개발하기 위해서는 무수히 많은 규칙을 지켜야 함
		=> 그래서 강제성이 짙은 "프레임워크"가 좋은 성과를 내고 있음
		=> 즉, 생산성 향상에 도움
		
		*프레임워크의 특징
		- 자유롭게 설계하고 코딩하는 것이 아니라 프레임워크가 제공하는 가이드대로 설계하고 코딩해야 함 (세팅도 마찬가지!)
		- 개발할 수 있는 범위가 정해져 있음
		- 개발자를 위한 다양한 도구나 플러그인들이 지원됨
		
		*프레임워크의 장단점
		> 장점: 개발 시간을 줄일 수 있음
				오류로부터 자유로워질 수 있음
		> 단점: 너무 의존하다 보면 개발능력이 떨어져서 프레임워크 없이 개발하는 것이 힘들 수도 있음
				습득하는 데까지 시간이 오래 걸릴 수 있음
				
		*프레임워크의 종류
		- 영속성: 데이터 관련한 기능들 (CRUD)을 보다 편리하게 작업할 수 있는 프레임워크
				ex) MyBatis, JPA, Hibernate, ...
		- 자바: 웹 애플리케이션에 초점을 맞춰 필요한 요소들을 모듈화해서 제공해 주는 프레임워크
				ex) Spring, Structs, ...
		- 화면 구현: 프론트앤드를 보다 쉽게 구현할 수 있게 틀을 제공해 주는 프레임워크
				ex) Bootstrap
		- 기능 및 지원: 특정 기능이나 업무 수행에 도움을 주는 기능을 제공하는 프레임워크
				ex) Log4j, Junit, ...
	 -->
	 
	 여기는 index.jsp야
	 
	 <!-- 
	 	
	 	* 앞으로 Spring 프로젝트 구조상 모든 화면 관련 파일들을 WEB-INF 폴더 내부의 views 폴더에 들어가 있을 것!
	 	=> WEB-INF 폴더는 WAS가 전적으로 관리하기 때문에 일반적인 브라우저에서 url 주소로 접속이 불가하다는 특징이 있음
	 	
	 	=> contextRoot로 요청할 시 index.jsp 페이지가 로딩되자마자 WEB-INF/views/sample.jsp로 곧바로 포워딩시킬 것!
	 	
	 -->
	 
	 <jsp:forward page="WEB-INF/views/main.jsp" />

</body>
</html>